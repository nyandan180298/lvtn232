{"version":3,"file":"static/js/370.10f2e6fa.chunk.js","mappings":"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","sources":["view/client/Homepage/HomepageHeader/index.jsx","assets/icon/CheckIcon.tsx","view/client/Homepage/HomeContainer/index.jsx","view/client/Homepage/Contact/index.jsx","view/client/Homepage/About/index.jsx","view/client/Homepage/Inner.jsx","view/client/Homepage/index.jsx","../node_modules/compute-scroll-into-view/src/index.ts","../node_modules/scroll-into-view-if-needed/src/index.ts"],"sourcesContent":["import { Anchor, Button } from 'antd';\r\nimport { memo } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst Wrapper = memo(() => {\r\n    const navigate = useNavigate();\r\n    return (\r\n        <div className=\"homepage-header\">\r\n            <div className=\"header-logo\">\r\n            <img\r\n            src={\"webicon_remove_background.png\"}\r\n            alt=\"Web Logo\"\r\n            height={80}\r\n          ></img>\r\n            </div>\r\n            <div className=\"homepage-header-tabs-container\">\r\n                <Anchor\r\n                    direction=\"horizontal\"\r\n                    replace\r\n                    items={[\r\n                        {\r\n                            key: 'home-anchor',\r\n                            href: '#/home',\r\n                            title: 'Trang chủ',\r\n                        },\r\n                        {\r\n                            key: 'about-anchor',\r\n                            href: '#/about',\r\n                            title: 'Giới thiệu',\r\n                        },\r\n                        // {\r\n                        //     key: 'news-anchor',\r\n                        //     href: '#part-3',\r\n                        //     title: 'Tin tức',\r\n                        // },\r\n                        {\r\n                            key: 'contact-anchor',\r\n                            href: '#/contact',\r\n                            title: 'Liên hệ',\r\n                        },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <div className=\"homepage-header-buttons-container\">\r\n                <Button\r\n                    className=\"homepage-button reg\"\r\n                    onClick={() => navigate('/register')}\r\n                >\r\n                    Đăng ký\r\n                </Button>\r\n                <Button\r\n                    className=\"homepage-button log\"\r\n                    onClick={() => navigate('/login')}\r\n                >\r\n                    Đăng nhập\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\nWrapper.displayName = 'HomepageHeader';\r\n\r\nconst HomepageHeader = Wrapper;\r\n\r\nexport default HomepageHeader;\r\n","function CheckIcon() {\r\n    return (\r\n        <svg\r\n            className=\"check-icon\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            viewBox=\"0 0 40 40\"\r\n            width=\"40px\"\r\n            height=\"40px\"\r\n        >\r\n            <path\r\n                fill=\"#98ccfd\"\r\n                d=\"M20,38.5C9.799,38.5,1.5,30.201,1.5,20S9.799,1.5,20,1.5S38.5,9.799,38.5,20S30.201,38.5,20,38.5z\"\r\n            />\r\n            <path\r\n                fill=\"#4788c7\"\r\n                d=\"M20,2c9.925,0,18,8.075,18,18s-8.075,18-18,18S2,29.925,2,20S10.075,2,20,2 M20,1 C9.507,1,1,9.507,1,20s8.507,19,19,19s19-8.507,19-19S30.493,1,20,1L20,1z\"\r\n            />\r\n            <g>\r\n                <path\r\n                    fill=\"#fff\"\r\n                    d=\"M16.025 28.02L9.118 21.113 11.24 18.992 16.025 23.777 28.118 11.684 30.24 13.805z\"\r\n                />\r\n            </g>\r\n        </svg>\r\n    );\r\n}\r\n\r\nexport default CheckIcon;\r\n","import { Button } from 'antd';\r\nimport CheckIcon from 'assets/icon/CheckIcon';\r\nimport { memo } from 'react';\r\n\r\nconst Wrapper = memo(() => {\r\n    return (\r\n        <div id=\"/home\" className=\"about-container\">\r\n            <div className=\"home-text-container\">\r\n                <div className=\"home-text-intro\">\r\n                    Phần mềm quản lý kho, hàng hóa cho cửa hàng và bán online\r\n                </div>\r\n                <div className=\"home-attr\">\r\n                    <CheckIcon />\r\n                    <div className=\"home-attr-text\">Đơn giản & Dễ sử dụng</div>\r\n                </div>\r\n                <div className=\"home-attr\">\r\n                    <CheckIcon />\r\n                    <div className=\"home-attr-text\">\r\n                        Quản lý số lượng chính xác\r\n                    </div>\r\n                </div>\r\n                <div className=\"home-attr\">\r\n                    <CheckIcon />\r\n                    <div className=\"home-attr-text\">Tiết kiệm chi phí</div>\r\n                </div>\r\n                <Button\r\n                    className=\"start-now-button\"\r\n                    href='#/login'\r\n                >\r\n                    Bắt đầu ngay\r\n                </Button>\r\n            </div>\r\n            <div className=\"home-background\">\r\n                <img\r\n                    src={'home.jpg'}\r\n                    alt=\"Homepage Background\"\r\n                    height={700}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\nWrapper.displayName = 'HomepageContainer';\r\n\r\nconst HomepageContainer = Wrapper;\r\n\r\nexport default HomepageContainer;\r\n","import { memo } from 'react';\r\n\r\nconst Wrapper = memo(() => {\r\n\r\n    return (\r\n        <div id=\"/contact\" className=\"contact-container\">\r\n            <div className=\"home-text-container\">\r\n                <div className=\"contact-text-intro\">Liên hệ chúng tôi:</div>\r\n                <div className=\"home-attr\">\r\n                    <div className=\"home-attr-text\">\r\n                        Email: smartInventoryBK@gmail.com\r\n                    </div>\r\n                </div>\r\n                <div className=\"home-attr\">\r\n                    <div className=\"home-attr-text\">\r\n                        Số điện thoại: 0908xxxxxx\r\n                    </div>\r\n                </div>\r\n                <div className=\"home-attr\">\r\n                    <div className=\"home-attr-text\">\r\n                        Địa chỉ: Cơ sở Lý Thường Kiệt: 268 Lý Thường Kiệt,\r\n                        Phường 14, Quận 10, TP. HCM\r\n                    </div>\r\n                </div>\r\n                <div className=\"home-attr\">\r\n                    <div className=\"home-attr-text\">\r\n                        Cơ sở Dĩ An: Khu phố Tân Lập, Phường Đông Hòa, TP. Dĩ\r\n                        An, Tỉnh Bình Dương\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\nWrapper.displayName = 'Contact';\r\n\r\nconst Contact = Wrapper;\r\n\r\nexport default Contact;\r\n","import { memo } from 'react';\r\n\r\nconst Wrapper = memo(() => {\r\n    return (\r\n        <div id=\"/about\" className=\"home-container\">\r\n            <div className=\"home-text-container\">\r\n                <div className=\"about-text-intro\">Giới thiệu về sản phẩm</div>\r\n                <div className=\"home-attr\">\r\n                    <div className=\"home-attr-text\">\r\n                        Sự phát triển của công nghệ tiên tiến và ảnh hưởng của\r\n                        dịch bệnh đã thay đổi hoàn toàn ngành dịch vụ truyền\r\n                        thống ở xã hội ngày này, điển hình là sự bùng nổ của các\r\n                        ứng dụng “thương mại điện tử, quản lý kho hàng” mang đến\r\n                        lợi ích to lớn cho kinh tế, sự phát triển của xã hội\r\n                        trong tình hình dịch bệnh hoành hành.\r\n                    </div>\r\n                </div>\r\n                <div className=\"home-attr\">\r\n                    <div className=\"home-attr-text\">\r\n                        Các chuỗi nhỏ hơn hay cửa hàng đơn lẻ thì không sở hữu\r\n                        cho mình 1 hệ thống để quản lý kho và phân phối hàng cho\r\n                        riêng mình sẽ phù hợp với dự án này.\r\n                    </div>\r\n                </div>\r\n                <div className=\"home-attr\">\r\n                    <div className=\"home-attr-text\">\r\n                        Với mong muốn mang đến sự tiện lợi, cùng trải nghiệm\r\n                        tuyệt vời nhất cho người dùng, người quản lý cửa hàng\r\n                        khi họ có nhu cầu quản lý cửa hàng một cách dễ dàng.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"home-background\">\r\n                <img\r\n                    src={'about.png'}\r\n                    alt=\"About Background\"\r\n                    height={700}\r\n                ></img>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\nWrapper.displayName = 'About';\r\n\r\nconst About = Wrapper;\r\n\r\nexport default About;\r\n","import { memo } from 'react';\r\nimport HomepageHeader from './HomepageHeader';\r\nimport HomepageContainer from './HomeContainer';\r\nimport Contact from './Contact';\r\nimport About from './About';\r\n\r\nconst Inner = memo(() => {\r\n    return (\r\n        <div className=\"homepage\">\r\n            <HomepageHeader />\r\n            <HomepageContainer />\r\n            <About />\r\n            <Contact />\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Inner;\r\n","import { memo } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Inner from './Inner';\r\n\r\nconst Wrapper = memo(() => {\r\n    const navigate = useNavigate();\r\n    return <Inner changeRoute={navigate} />;\r\n});\r\nWrapper.displayName = 'Homepage';\r\n\r\nconst Homepage = Wrapper;\r\n\r\nexport default Homepage;\r\n","// Compute what scrolling needs to be done on required scrolling boxes for target to be in view\n\n// The type names here are named after the spec to make it easier to find more information around what they mean:\n// To reduce churn and reduce things that need be maintained things from the official TS DOM library is used here\n// https://drafts.csswg.org/cssom-view/\n\n// For a definition on what is \"block flow direction\" exactly, check this: https://drafts.csswg.org/css-writing-modes-4/#block-flow-direction\n\n/**\n * This new option is tracked in this PR, which is the most likely candidate at the time: https://github.com/w3c/csswg-drafts/pull/1805\n * @public\n */\nexport type ScrollMode = 'always' | 'if-needed'\n\n/** @public */\nexport interface Options {\n  /**\n   * Control the logical scroll position on the y-axis. The spec states that the `block` direction is related to the [writing-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode), but this is not implemented yet in this library.\n   * This means that `block: 'start'` aligns to the top edge and `block: 'end'` to the bottom.\n   * @defaultValue 'center'\n   */\n  block?: ScrollLogicalPosition\n  /**\n   * Like `block` this is affected by the [writing-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode). In left-to-right pages `inline: 'start'` will align to the left edge. In right-to-left it should be flipped. This will be supported in a future release.\n   * @defaultValue 'nearest'\n   */\n  inline?: ScrollLogicalPosition\n  /**\n   * This is a proposed addition to the spec that you can track here: https://github.com/w3c/csswg-drafts/pull/5677\n   *\n   * This library will be updated to reflect any changes to the spec and will provide a migration path.\n   * To be backwards compatible with `Element.scrollIntoViewIfNeeded` if something is not 100% visible it will count as \"needs scrolling\". If you need a different visibility ratio your best option would be to implement an [Intersection Observer](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API).\n   * @defaultValue 'always'\n   */\n  scrollMode?: ScrollMode\n  /**\n   * By default there is no boundary. All the parent elements of your target is checked until it reaches the viewport ([`document.scrollingElement`](https://developer.mozilla.org/en-US/docs/Web/API/document/scrollingElement)) when calculating layout and what to scroll.\n   * By passing a boundary you can short-circuit this loop depending on your needs:\n   * \n   * - Prevent the browser window from scrolling.\n   * - Scroll elements into view in a list, without scrolling container elements.\n   * \n   * You can also pass a function to do more dynamic checks to override the scroll scoping:\n   * \n   * ```js\n   * let actions = compute(target, {\n   *   boundary: (parent) => {\n   *     // By default `overflow: hidden` elements are allowed, only `overflow: visible | clip` is skipped as\n   *     // this is required by the CSSOM spec\n   *     if (getComputedStyle(parent)['overflow'] === 'hidden') {\n   *       return false\n   *     }\n\n   *     return true\n   *   },\n   * })\n   * ```\n   * @defaultValue null\n   */\n  boundary?: Element | ((parent: Element) => boolean) | null\n  /**\n   * New option that skips auto-scrolling all nodes with overflow: hidden set\n   * See FF implementation: https://hg.mozilla.org/integration/fx-team/rev/c48c3ec05012#l7.18\n   * @defaultValue false\n   * @public\n   */\n  skipOverflowHiddenElements?: boolean\n}\n\n/** @public */\nexport interface ScrollAction {\n  el: Element\n  top: number\n  left: number\n}\n\n// @TODO better shadowdom test, 11 = document fragment\nconst isElement = (el: any): el is Element =>\n  typeof el === 'object' && el != null && el.nodeType === 1\n\nconst canOverflow = (\n  overflow: string | null,\n  skipOverflowHiddenElements?: boolean\n) => {\n  if (skipOverflowHiddenElements && overflow === 'hidden') {\n    return false\n  }\n\n  return overflow !== 'visible' && overflow !== 'clip'\n}\n\nconst getFrameElement = (el: Element) => {\n  if (!el.ownerDocument || !el.ownerDocument.defaultView) {\n    return null\n  }\n\n  try {\n    return el.ownerDocument.defaultView.frameElement\n  } catch (e) {\n    return null\n  }\n}\n\nconst isHiddenByFrame = (el: Element): boolean => {\n  const frame = getFrameElement(el)\n  if (!frame) {\n    return false\n  }\n\n  return (\n    frame.clientHeight < el.scrollHeight || frame.clientWidth < el.scrollWidth\n  )\n}\n\nconst isScrollable = (el: Element, skipOverflowHiddenElements?: boolean) => {\n  if (el.clientHeight < el.scrollHeight || el.clientWidth < el.scrollWidth) {\n    const style = getComputedStyle(el, null)\n    return (\n      canOverflow(style.overflowY, skipOverflowHiddenElements) ||\n      canOverflow(style.overflowX, skipOverflowHiddenElements) ||\n      isHiddenByFrame(el)\n    )\n  }\n\n  return false\n}\n/**\n * Find out which edge to align against when logical scroll position is \"nearest\"\n * Interesting fact: \"nearest\" works similarily to \"if-needed\", if the element is fully visible it will not scroll it\n *\n * Legends:\n * ┌────────┐ ┏ ━ ━ ━ ┓\n * │ target │   frame\n * └────────┘ ┗ ━ ━ ━ ┛\n */\nconst alignNearest = (\n  scrollingEdgeStart: number,\n  scrollingEdgeEnd: number,\n  scrollingSize: number,\n  scrollingBorderStart: number,\n  scrollingBorderEnd: number,\n  elementEdgeStart: number,\n  elementEdgeEnd: number,\n  elementSize: number\n) => {\n  /**\n   * If element edge A and element edge B are both outside scrolling box edge A and scrolling box edge B\n   *\n   *          ┌──┐\n   *        ┏━│━━│━┓\n   *          │  │\n   *        ┃ │  │ ┃        do nothing\n   *          │  │\n   *        ┗━│━━│━┛\n   *          └──┘\n   *\n   *  If element edge C and element edge D are both outside scrolling box edge C and scrolling box edge D\n   *\n   *    ┏ ━ ━ ━ ━ ┓\n   *   ┌───────────┐\n   *   │┃         ┃│        do nothing\n   *   └───────────┘\n   *    ┗ ━ ━ ━ ━ ┛\n   */\n  if (\n    (elementEdgeStart < scrollingEdgeStart &&\n      elementEdgeEnd > scrollingEdgeEnd) ||\n    (elementEdgeStart > scrollingEdgeStart && elementEdgeEnd < scrollingEdgeEnd)\n  ) {\n    return 0\n  }\n\n  /**\n   * If element edge A is outside scrolling box edge A and element height is less than scrolling box height\n   *\n   *          ┌──┐\n   *        ┏━│━━│━┓         ┏━┌━━┐━┓\n   *          └──┘             │  │\n   *  from  ┃      ┃     to  ┃ └──┘ ┃\n   *\n   *        ┗━ ━━ ━┛         ┗━ ━━ ━┛\n   *\n   * If element edge B is outside scrolling box edge B and element height is greater than scrolling box height\n   *\n   *        ┏━ ━━ ━┓         ┏━┌━━┐━┓\n   *                           │  │\n   *  from  ┃ ┌──┐ ┃     to  ┃ │  │ ┃\n   *          │  │             │  │\n   *        ┗━│━━│━┛         ┗━│━━│━┛\n   *          │  │             └──┘\n   *          │  │\n   *          └──┘\n   *\n   * If element edge C is outside scrolling box edge C and element width is less than scrolling box width\n   *\n   *       from                 to\n   *    ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *  ┌───┐                 ┌───┐\n   *  │ ┃ │       ┃         ┃   │     ┃\n   *  └───┘                 └───┘\n   *    ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   * If element edge D is outside scrolling box edge D and element width is greater than scrolling box width\n   *\n   *       from                 to\n   *    ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *        ┌───────────┐   ┌───────────┐\n   *    ┃   │     ┃     │   ┃         ┃ │\n   *        └───────────┘   └───────────┘\n   *    ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   */\n  if (\n    (elementEdgeStart <= scrollingEdgeStart && elementSize <= scrollingSize) ||\n    (elementEdgeEnd >= scrollingEdgeEnd && elementSize >= scrollingSize)\n  ) {\n    return elementEdgeStart - scrollingEdgeStart - scrollingBorderStart\n  }\n\n  /**\n   * If element edge B is outside scrolling box edge B and element height is less than scrolling box height\n   *\n   *        ┏━ ━━ ━┓         ┏━ ━━ ━┓\n   *\n   *  from  ┃      ┃     to  ┃ ┌──┐ ┃\n   *          ┌──┐             │  │\n   *        ┗━│━━│━┛         ┗━└━━┘━┛\n   *          └──┘\n   *\n   * If element edge A is outside scrolling box edge A and element height is greater than scrolling box height\n   *\n   *          ┌──┐\n   *          │  │\n   *          │  │             ┌──┐\n   *        ┏━│━━│━┓         ┏━│━━│━┓\n   *          │  │             │  │\n   *  from  ┃ └──┘ ┃     to  ┃ │  │ ┃\n   *                           │  │\n   *        ┗━ ━━ ━┛         ┗━└━━┘━┛\n   *\n   * If element edge C is outside scrolling box edge C and element width is greater than scrolling box width\n   *\n   *           from                 to\n   *        ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *  ┌───────────┐           ┌───────────┐\n   *  │     ┃     │   ┃       │ ┃         ┃\n   *  └───────────┘           └───────────┘\n   *        ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   * If element edge D is outside scrolling box edge D and element width is less than scrolling box width\n   *\n   *           from                 to\n   *        ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *                ┌───┐             ┌───┐\n   *        ┃       │ ┃ │       ┃     │   ┃\n   *                └───┘             └───┘\n   *        ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   */\n  if (\n    (elementEdgeEnd > scrollingEdgeEnd && elementSize < scrollingSize) ||\n    (elementEdgeStart < scrollingEdgeStart && elementSize > scrollingSize)\n  ) {\n    return elementEdgeEnd - scrollingEdgeEnd + scrollingBorderEnd\n  }\n\n  return 0\n}\n\nconst getParentElement = (element: Node): Element | null => {\n  const parent = element.parentElement\n  if (parent == null) {\n    return (element.getRootNode() as ShadowRoot).host || null\n  }\n  return parent\n}\n\nconst getScrollMargins = (target: Element) => {\n  const computedStyle = window.getComputedStyle(target)\n  return {\n    top: parseFloat(computedStyle.scrollMarginTop) || 0,\n    right: parseFloat(computedStyle.scrollMarginRight) || 0,\n    bottom: parseFloat(computedStyle.scrollMarginBottom) || 0,\n    left: parseFloat(computedStyle.scrollMarginLeft) || 0,\n  }\n}\n\n/** @public */\nexport const compute = (target: Element, options: Options): ScrollAction[] => {\n  if (typeof document === 'undefined') {\n    // If there's no DOM we assume it's not in a browser environment\n    return []\n  }\n\n  const { scrollMode, block, inline, boundary, skipOverflowHiddenElements } =\n    options\n  // Allow using a callback to check the boundary\n  // The default behavior is to check if the current target matches the boundary element or not\n  // If undefined it'll check that target is never undefined (can happen as we recurse up the tree)\n  const checkBoundary =\n    typeof boundary === 'function' ? boundary : (node: any) => node !== boundary\n\n  if (!isElement(target)) {\n    throw new TypeError('Invalid target')\n  }\n\n  // Used to handle the top most element that can be scrolled\n  const scrollingElement = document.scrollingElement || document.documentElement\n\n  // Collect all the scrolling boxes, as defined in the spec: https://drafts.csswg.org/cssom-view/#scrolling-box\n  const frames: Element[] = []\n  let cursor: Element | null = target\n  while (isElement(cursor) && checkBoundary(cursor)) {\n    // Move cursor to parent\n    cursor = getParentElement(cursor)\n\n    // Stop when we reach the viewport\n    if (cursor === scrollingElement) {\n      frames.push(cursor)\n      break\n    }\n\n    // Skip document.body if it's not the scrollingElement and documentElement isn't independently scrollable\n    if (\n      cursor != null &&\n      cursor === document.body &&\n      isScrollable(cursor) &&\n      !isScrollable(document.documentElement)\n    ) {\n      continue\n    }\n\n    // Now we check if the element is scrollable, this code only runs if the loop haven't already hit the viewport or a custom boundary\n    if (cursor != null && isScrollable(cursor, skipOverflowHiddenElements)) {\n      frames.push(cursor)\n    }\n  }\n\n  // Support pinch-zooming properly, making sure elements scroll into the visual viewport\n  // Browsers that don't support visualViewport will report the layout viewport dimensions on document.documentElement.clientWidth/Height\n  // and viewport dimensions on window.innerWidth/Height\n  // https://www.quirksmode.org/mobile/viewports2.html\n  // https://bokand.github.io/viewport/index.html\n  const viewportWidth = window.visualViewport?.width ?? innerWidth\n  const viewportHeight = window.visualViewport?.height ?? innerHeight\n  const { scrollX, scrollY } = window\n\n  const {\n    height: targetHeight,\n    width: targetWidth,\n    top: targetTop,\n    right: targetRight,\n    bottom: targetBottom,\n    left: targetLeft,\n  } = target.getBoundingClientRect()\n  const {\n    top: marginTop,\n    right: marginRight,\n    bottom: marginBottom,\n    left: marginLeft,\n  } = getScrollMargins(target)\n\n  // These values mutate as we loop through and generate scroll coordinates\n  let targetBlock: number =\n    block === 'start' || block === 'nearest'\n      ? targetTop - marginTop\n      : block === 'end'\n      ? targetBottom + marginBottom\n      : targetTop + targetHeight / 2 - marginTop + marginBottom // block === 'center\n  let targetInline: number =\n    inline === 'center'\n      ? targetLeft + targetWidth / 2 - marginLeft + marginRight\n      : inline === 'end'\n      ? targetRight + marginRight\n      : targetLeft - marginLeft // inline === 'start || inline === 'nearest\n\n  // Collect new scroll positions\n  const computations: ScrollAction[] = []\n  // In chrome there's no longer a difference between caching the `frames.length` to a var or not, so we don't in this case (size > speed anyways)\n  for (let index = 0; index < frames.length; index++) {\n    const frame = frames[index]\n\n    // @TODO add a shouldScroll hook here that allows userland code to take control\n\n    const { height, width, top, right, bottom, left } =\n      frame.getBoundingClientRect()\n\n    // If the element is already visible we can end it here\n    // @TODO targetBlock and targetInline should be taken into account to be compliant with https://github.com/w3c/csswg-drafts/pull/1805/files#diff-3c17f0e43c20f8ecf89419d49e7ef5e0R1333\n    if (\n      scrollMode === 'if-needed' &&\n      targetTop >= 0 &&\n      targetLeft >= 0 &&\n      targetBottom <= viewportHeight &&\n      targetRight <= viewportWidth &&\n      targetTop >= top &&\n      targetBottom <= bottom &&\n      targetLeft >= left &&\n      targetRight <= right\n    ) {\n      // Break the loop and return the computations for things that are not fully visible\n      return computations\n    }\n\n    const frameStyle = getComputedStyle(frame)\n    const borderLeft = parseInt(frameStyle.borderLeftWidth as string, 10)\n    const borderTop = parseInt(frameStyle.borderTopWidth as string, 10)\n    const borderRight = parseInt(frameStyle.borderRightWidth as string, 10)\n    const borderBottom = parseInt(frameStyle.borderBottomWidth as string, 10)\n\n    let blockScroll: number = 0\n    let inlineScroll: number = 0\n\n    // The property existance checks for offfset[Width|Height] is because only HTMLElement objects have them, but any Element might pass by here\n    // @TODO find out if the \"as HTMLElement\" overrides can be dropped\n    const scrollbarWidth =\n      'offsetWidth' in frame\n        ? (frame as HTMLElement).offsetWidth -\n          (frame as HTMLElement).clientWidth -\n          borderLeft -\n          borderRight\n        : 0\n    const scrollbarHeight =\n      'offsetHeight' in frame\n        ? (frame as HTMLElement).offsetHeight -\n          (frame as HTMLElement).clientHeight -\n          borderTop -\n          borderBottom\n        : 0\n\n    const scaleX =\n      'offsetWidth' in frame\n        ? (frame as HTMLElement).offsetWidth === 0\n          ? 0\n          : width / (frame as HTMLElement).offsetWidth\n        : 0\n    const scaleY =\n      'offsetHeight' in frame\n        ? (frame as HTMLElement).offsetHeight === 0\n          ? 0\n          : height / (frame as HTMLElement).offsetHeight\n        : 0\n\n    if (scrollingElement === frame) {\n      // Handle viewport logic (document.documentElement or document.body)\n\n      if (block === 'start') {\n        blockScroll = targetBlock\n      } else if (block === 'end') {\n        blockScroll = targetBlock - viewportHeight\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(\n          scrollY,\n          scrollY + viewportHeight,\n          viewportHeight,\n          borderTop,\n          borderBottom,\n          scrollY + targetBlock,\n          scrollY + targetBlock + targetHeight,\n          targetHeight\n        )\n      } else {\n        // block === 'center' is the default\n        blockScroll = targetBlock - viewportHeight / 2\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - viewportWidth / 2\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - viewportWidth\n      } else {\n        // inline === 'nearest' is the default\n        inlineScroll = alignNearest(\n          scrollX,\n          scrollX + viewportWidth,\n          viewportWidth,\n          borderLeft,\n          borderRight,\n          scrollX + targetInline,\n          scrollX + targetInline + targetWidth,\n          targetWidth\n        )\n      }\n\n      // Apply scroll position offsets and ensure they are within bounds\n      // @TODO add more test cases to cover this 100%\n      blockScroll = Math.max(0, blockScroll + scrollY)\n      inlineScroll = Math.max(0, inlineScroll + scrollX)\n    } else {\n      // Handle each scrolling frame that might exist between the target and the viewport\n      if (block === 'start') {\n        blockScroll = targetBlock - top - borderTop\n      } else if (block === 'end') {\n        blockScroll = targetBlock - bottom + borderBottom + scrollbarHeight\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(\n          top,\n          bottom,\n          height,\n          borderTop,\n          borderBottom + scrollbarHeight,\n          targetBlock,\n          targetBlock + targetHeight,\n          targetHeight\n        )\n      } else {\n        // block === 'center' is the default\n        blockScroll = targetBlock - (top + height / 2) + scrollbarHeight / 2\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline - left - borderLeft\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - (left + width / 2) + scrollbarWidth / 2\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - right + borderRight + scrollbarWidth\n      } else {\n        // inline === 'nearest' is the default\n        inlineScroll = alignNearest(\n          left,\n          right,\n          width,\n          borderLeft,\n          borderRight + scrollbarWidth,\n          targetInline,\n          targetInline + targetWidth,\n          targetWidth\n        )\n      }\n\n      const { scrollLeft, scrollTop } = frame\n      // Ensure scroll coordinates are not out of bounds while applying scroll offsets\n      blockScroll =\n        scaleY === 0\n          ? 0\n          : Math.max(\n              0,\n              Math.min(\n                scrollTop + blockScroll / scaleY,\n                frame.scrollHeight - height / scaleY + scrollbarHeight\n              )\n            )\n      inlineScroll =\n        scaleX === 0\n          ? 0\n          : Math.max(\n              0,\n              Math.min(\n                scrollLeft + inlineScroll / scaleX,\n                frame.scrollWidth - width / scaleX + scrollbarWidth\n              )\n            )\n\n      // Cache the offset so that parent frames can scroll this into view correctly\n      targetBlock += scrollTop - blockScroll\n      targetInline += scrollLeft - inlineScroll\n    }\n\n    computations.push({ el: frame, top: blockScroll, left: inlineScroll })\n  }\n\n  return computations\n}\n","import { compute } from 'compute-scroll-into-view'\nimport type {\n  Options as BaseOptions,\n  ScrollAction,\n} from 'compute-scroll-into-view'\n\n/** @public */\nexport type Options<T = unknown> =\n  | StandardBehaviorOptions\n  | CustomBehaviorOptions<T>\n\n/**\n * Only scrolls if the `node` is partially out of view:\n * ```ts\n * scrollIntoView(node, { scrollMode: 'if-needed' })\n * ```\n * Skips scrolling `overflow: hidden` elements:\n * ```ts\n * scrollIntoView(node, { skipOverflowHiddenElements: true })\n * ```\n * When scrolling is needed do the least and smoothest scrolling possible:\n * ```ts\n * scrollIntoView(node, {\n *   behavior: 'smooth',\n *   scrollMode: 'if-needed',\n *   block: 'nearest',\n *   inline: 'nearest',\n * })\n * ```\n * @public\n */\nexport interface StandardBehaviorOptions extends BaseOptions {\n  /**\n   * @defaultValue 'auto\n   */\n  behavior?: ScrollBehavior\n}\n\n/** @public */\nexport interface CustomBehaviorOptions<T = unknown> extends BaseOptions {\n  behavior: CustomScrollBehaviorCallback<T>\n}\n\n/** @public */\nexport type CustomScrollBehaviorCallback<T = unknown> = (\n  actions: ScrollAction[]\n) => T\n\nconst isStandardScrollBehavior = (\n  options: any\n): options is StandardBehaviorOptions =>\n  options === Object(options) && Object.keys(options).length !== 0\n\nconst isCustomScrollBehavior = <T = unknown>(\n  options: any\n): options is CustomBehaviorOptions<T> =>\n  typeof options === 'object' ? typeof options.behavior === 'function' : false\n\nconst getOptions = (options: any): StandardBehaviorOptions => {\n  // Handle alignToTop for legacy reasons, to be compatible with the spec\n  if (options === false) {\n    return { block: 'end', inline: 'nearest' }\n  }\n\n  if (isStandardScrollBehavior(options)) {\n    // compute.ts ensures the defaults are block: 'center' and inline: 'nearest', to conform to the spec\n    return options\n  }\n\n  // if options = {}, options = true or options = null, based on w3c web platform test\n  return { block: 'start', inline: 'nearest' }\n}\n\nconst getScrollMargins = (target: Element) => {\n  const computedStyle = window.getComputedStyle(target)\n  return {\n    top: parseFloat(computedStyle.scrollMarginTop) || 0,\n    right: parseFloat(computedStyle.scrollMarginRight) || 0,\n    bottom: parseFloat(computedStyle.scrollMarginBottom) || 0,\n    left: parseFloat(computedStyle.scrollMarginLeft) || 0,\n  }\n}\n\n// Determine if the element is part of the document (including shadow dom)\n// Derived from code of Andy Desmarais\n// https://terodox.tech/how-to-tell-if-an-element-is-in-the-dom-including-the-shadow-dom/\nconst isInDocument = (element: Node) => {\n  let currentElement = element\n  while (currentElement && currentElement.parentNode) {\n    if (currentElement.parentNode === document) {\n      return true\n    } else if (currentElement.parentNode instanceof ShadowRoot) {\n      currentElement = (currentElement.parentNode as ShadowRoot).host\n    } else {\n      currentElement = currentElement.parentNode\n    }\n  }\n  return false\n}\n\n/**\n * Scrolls the given element into view, with options for when, and how.\n * Supports the same `options` as [`Element.prototype.scrollIntoView`](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView) with additions such as `scrollMode`, `behavior: Function` and `skipOverflowHiddenElements`.\n * @public\n */\nfunction scrollIntoView(\n  target: Element,\n  options?: StandardBehaviorOptions | boolean\n): void\n/**\n * Scrolls the given element into view, with options for when, and how.\n * Supports the same `options` as [`Element.prototype.scrollIntoView`](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView) with additions such as `scrollMode`, `behavior: Function` and `skipOverflowHiddenElements`.\n *\n * You can set the expected return type for `behavior: Function`:\n * ```ts\n * await scrollIntoView<Promise<boolean[]>>(node, {\n *   behavior: async actions => {\n *     return Promise.all(actions.map(\n *       // animate() resolves to `true` if anything was animated, `false` if the element already were in the end state\n *       ({ el, left, top }) => animate(el, {scroll: {left, top}})\n *     ))\n *   }\n * })\n * ```\n * @public\n */\nfunction scrollIntoView<T>(\n  target: Element,\n  options: CustomBehaviorOptions<T>\n): T\nfunction scrollIntoView<T = unknown>(\n  target: Element,\n  options?: StandardBehaviorOptions | CustomBehaviorOptions<T> | boolean\n): T | void {\n  // Browsers treats targets that aren't in the dom as a no-op and so should we\n  if (!target.isConnected || !isInDocument(target)) {\n    return\n  }\n\n  const margins = getScrollMargins(target)\n\n  if (isCustomScrollBehavior<T>(options)) {\n    return options.behavior(compute(target, options))\n  }\n\n  const behavior = typeof options === 'boolean' ? undefined : options?.behavior\n\n  for (const { el, top, left } of compute(target, getOptions(options))) {\n    const adjustedTop = top - margins.top + margins.bottom\n    const adjustedLeft = left - margins.left + margins.right\n    el.scroll({ top: adjustedTop, left: adjustedLeft, behavior })\n  }\n}\n\nexport default scrollIntoView\n"],"names":["Wrapper","memo","navigate","useNavigate","_jsxs","className","children","_jsx","src","alt","height","Anchor","direction","replace","items","key","href","title","Button","onClick","displayName","xmlns","viewBox","width","fill","d","id","CheckIcon","HomepageHeader","HomepageContainer","About","Contact","Inner","changeRoute","t","nodeType","e","n","clientHeight","scrollHeight","clientWidth","scrollWidth","o","getComputedStyle","overflowY","overflowX","ownerDocument","defaultView","frameElement","l","r","i","s","parentElement","getRootNode","host","h","document","c","scrollMode","f","block","u","inline","a","boundary","g","skipOverflowHiddenElements","p","TypeError","m","scrollingElement","documentElement","w","W","push","body","b","window","visualViewport","innerWidth","H","innerHeight","_window","y","scrollX","M","scrollY","_e$getBoundingClientR","getBoundingClientRect","v","E","x","top","C","right","I","bottom","R","left","_ref","parseFloat","scrollMarginTop","scrollMarginRight","scrollMarginBottom","scrollMarginLeft","T","B","F","V","k","D","L","length","_e$getBoundingClientR2","parseInt","borderLeftWidth","borderTopWidth","borderRightWidth","borderBottomWidth","offsetWidth","offsetHeight","S","X","Math","max","scrollLeft","scrollTop","min","el","Object","keys","isConnected","parentNode","ShadowRoot","behavior","_step","_iterator","_createForOfIteratorHelper","done","_step$value","value","scroll","err"],"sourceRoot":""}